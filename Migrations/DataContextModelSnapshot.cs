// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using storageUnitAPi.Data;

#nullable disable

namespace storageUnitAPi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("storageUnitAPi.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StorageUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StorageUnitId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("storageUnitAPi.Models.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CastTime")
                        .HasColumnType("int");

                    b.Property<string>("Components")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Known")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Prepared")
                        .HasColumnType("bit");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<string>("SavingThrow")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SpellResistance")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("storageUnitAPi.Models.StorageUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CurrentOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PreviousOwnersIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("ReservationStartDate")
                        .HasColumnType("date");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentOwnerId");

                    b.ToTable("StorageUnit");
                });

            modelBuilder.Entity("storageUnitAPi.Models.Customer", b =>
                {
                    b.HasOne("storageUnitAPi.Models.StorageUnit", null)
                        .WithMany("PreviousOwners")
                        .HasForeignKey("StorageUnitId");
                });

            modelBuilder.Entity("storageUnitAPi.Models.StorageUnit", b =>
                {
                    b.HasOne("storageUnitAPi.Models.Customer", "CurrentOwner")
                        .WithMany()
                        .HasForeignKey("CurrentOwnerId");

                    b.Navigation("CurrentOwner");
                });

            modelBuilder.Entity("storageUnitAPi.Models.StorageUnit", b =>
                {
                    b.Navigation("PreviousOwners");
                });
#pragma warning restore 612, 618
        }
    }
}
